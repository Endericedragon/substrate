// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bm5`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_multisig
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/multisig/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_multisig.
pub trait WeightInfo {
	fn as_multi_threshold_1(z: u32, ) -> Weight;
	fn as_multi_create(s: u32, z: u32, ) -> Weight;
	fn as_multi_approve(s: u32, z: u32, ) -> Weight;
	fn as_multi_complete(s: u32, z: u32, ) -> Weight;
	fn approve_as_multi_create(s: u32, ) -> Weight;
	fn approve_as_multi_approve(s: u32, ) -> Weight;
	fn cancel_as_multi(s: u32, ) -> Weight;
}

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_589 nanoseconds.
		Weight::from_ref_time(12_985_243)
			.saturating_add(Weight::from_proof_size(0))
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(608).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `352 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 39_375 nanoseconds.
		Weight::from_ref_time(33_201_694)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 445
			.saturating_add(Weight::from_ref_time(67_777).saturating_mul(s.into()))
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(1_629).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6811`
		// Minimum execution time: 28_482 nanoseconds.
		Weight::from_ref_time(22_805_243)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 262
			.saturating_add(Weight::from_ref_time(62_102).saturating_mul(s.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_624).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `489 + s * (33 ±0)`
		//  Estimated: `10404`
		// Minimum execution time: 44_325 nanoseconds.
		Weight::from_ref_time(37_126_202)
			.saturating_add(Weight::from_proof_size(10404))
			// Standard Error: 544
			.saturating_add(Weight::from_ref_time(81_181).saturating_mul(s.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_635).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 30_657 nanoseconds.
		Weight::from_ref_time(31_879_725)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 493
			.saturating_add(Weight::from_ref_time(66_998).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6811`
		// Minimum execution time: 20_507 nanoseconds.
		Weight::from_ref_time(21_507_241)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 604
			.saturating_add(Weight::from_ref_time(61_938).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `555 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 31_580 nanoseconds.
		Weight::from_ref_time(33_120_696)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 542
			.saturating_add(Weight::from_ref_time(63_011).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_589 nanoseconds.
		Weight::from_ref_time(12_985_243)
			.saturating_add(Weight::from_proof_size(0))
			// Standard Error: 1
			.saturating_add(Weight::from_ref_time(608).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `352 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 39_375 nanoseconds.
		Weight::from_ref_time(33_201_694)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 445
			.saturating_add(Weight::from_ref_time(67_777).saturating_mul(s.into()))
			// Standard Error: 4
			.saturating_add(Weight::from_ref_time(1_629).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6811`
		// Minimum execution time: 28_482 nanoseconds.
		Weight::from_ref_time(22_805_243)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 262
			.saturating_add(Weight::from_ref_time(62_102).saturating_mul(s.into()))
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_624).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `489 + s * (33 ±0)`
		//  Estimated: `10404`
		// Minimum execution time: 44_325 nanoseconds.
		Weight::from_ref_time(37_126_202)
			.saturating_add(Weight::from_proof_size(10404))
			// Standard Error: 544
			.saturating_add(Weight::from_ref_time(81_181).saturating_mul(s.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_635).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 30_657 nanoseconds.
		Weight::from_ref_time(31_879_725)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 493
			.saturating_add(Weight::from_ref_time(66_998).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6811`
		// Minimum execution time: 20_507 nanoseconds.
		Weight::from_ref_time(21_507_241)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 604
			.saturating_add(Weight::from_ref_time(61_938).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `555 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 31_580 nanoseconds.
		Weight::from_ref_time(33_120_696)
			.saturating_add(Weight::from_proof_size(6811))
			// Standard Error: 542
			.saturating_add(Weight::from_ref_time(63_011).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
