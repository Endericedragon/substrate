// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_alliance
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-ul9xcbg-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_alliance
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/alliance/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_alliance.
pub trait WeightInfo {
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn init_members(m: u32, z: u32, ) -> Weight;
	fn disband(x: u32, y: u32, z: u32, ) -> Weight;
	fn set_rule() -> Weight;
	fn announce() -> Weight;
	fn remove_announcement() -> Weight;
	fn join_alliance() -> Weight;
	fn nominate_ally() -> Weight;
	fn elevate_ally() -> Weight;
	fn give_retirement_notice() -> Weight;
	fn retire() -> Weight;
	fn kick_member() -> Weight;
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight;
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight;
	fn abdicate_fellow_status() -> Weight;
}

/// Weights for pallet_alliance using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion ProposalOf (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalCount (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Voting (r:0 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `618 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `15463 + m * (124 ±0) + p * (148 ±0)`
		// Minimum execution time: 38_447_000 picoseconds.
		Weight::from_parts(41_231_439, 15463)
			// Standard Error: 160
			.saturating_add(Weight::from_parts(1_819, 0).saturating_mul(b.into()))
			// Standard Error: 1_676
			.saturating_add(Weight::from_parts(39_510, 0).saturating_mul(m.into()))
			// Standard Error: 1_655
			.saturating_add(Weight::from_parts(170_361, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 124).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 148).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1042 + m * (64 ±0)`
		//  Estimated: `11182 + m * (64 ±0)`
		// Minimum execution time: 31_560_000 picoseconds.
		Weight::from_parts(35_820_634, 11182)
			// Standard Error: 1_795
			.saturating_add(Weight::from_parts(71_616, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + m * (96 ±0) + p * (37 ±0)`
		//  Estimated: `15551 + m * (384 ±0) + p * (148 ±0)`
		// Minimum execution time: 47_194_000 picoseconds.
		Weight::from_parts(44_895_986, 15551)
			// Standard Error: 1_459
			.saturating_add(Weight::from_parts(71_990, 0).saturating_mul(m.into()))
			// Standard Error: 1_423
			.saturating_add(Weight::from_parts(157_685, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 384).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 148).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `903 + m * (96 ±0) + p * (41 ±0)`
		//  Estimated: `20072 + m * (392 ±0) + p * (160 ±0)`
		// Minimum execution time: 61_903_000 picoseconds.
		Weight::from_parts(59_266_338, 20072)
			// Standard Error: 176
			.saturating_add(Weight::from_parts(549, 0).saturating_mul(b.into()))
			// Standard Error: 1_871
			.saturating_add(Weight::from_parts(75_822, 0).saturating_mul(m.into()))
			// Standard Error: 1_824
			.saturating_add(Weight::from_parts(168_771, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 392).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 160).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:1 w:0)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + m * (96 ±0) + p * (37 ±0)`
		//  Estimated: `17666 + m * (480 ±0) + p * (185 ±0)`
		// Minimum execution time: 48_968_000 picoseconds.
		Weight::from_parts(46_141_039, 17666)
			// Standard Error: 1_418
			.saturating_add(Weight::from_parts(72_395, 0).saturating_mul(m.into()))
			// Standard Error: 1_400
			.saturating_add(Weight::from_parts(162_922, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 480).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 185).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:1 w:0)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[5, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `591 + m * (96 ±0) + p * (36 ±0)`
		//  Estimated: `17471 + m * (485 ±0) + p * (180 ±0)`
		// Minimum execution time: 47_908_000 picoseconds.
		Weight::from_parts(46_286_284, 17471)
			// Standard Error: 153
			.saturating_add(Weight::from_parts(358, 0).saturating_mul(b.into()))
			// Standard Error: 1_636
			.saturating_add(Weight::from_parts(71_590, 0).saturating_mul(m.into()))
			// Standard Error: 1_578
			.saturating_add(Weight::from_parts(157_360, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 485).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 180).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:1 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	/// The range of component `z` is `[0, 100]`.
	fn init_members(m: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `217`
		//  Estimated: `14064`
		// Minimum execution time: 38_712_000 picoseconds.
		Weight::from_parts(27_529_221, 14064)
			// Standard Error: 1_167
			.saturating_add(Weight::from_parts(153_596, 0).saturating_mul(m.into()))
			// Standard Error: 1_153
			.saturating_add(Weight::from_parts(138_300, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance DepositOf (r:200 w:50)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:50 w:50)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[0, 100]`.
	/// The range of component `z` is `[0, 50]`.
	fn disband(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (50 ±0) + y * (51 ±0) + z * (251 ±0)`
		//  Estimated: `35975 + x * (2587 ±0) + y * (2590 ±0) + z * (3113 ±1)`
		// Minimum execution time: 319_967_000 picoseconds.
		Weight::from_parts(325_795_000, 35975)
			// Standard Error: 27_843
			.saturating_add(Weight::from_parts(498_045, 0).saturating_mul(x.into()))
			// Standard Error: 27_709
			.saturating_add(Weight::from_parts(681_183, 0).saturating_mul(y.into()))
			// Standard Error: 55_368
			.saturating_add(Weight::from_parts(17_597_680, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(z.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2590).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3113).saturating_mul(z.into()))
	}
	/// Storage: Alliance Rule (r:0 w:1)
	/// Proof: Alliance Rule (max_values: Some(1), max_size: Some(87), added: 582, mode: MaxEncodedLen)
	fn set_rule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_703_000 picoseconds.
		Weight::from_parts(10_492_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Announcements (r:1 w:1)
	/// Proof: Alliance Announcements (max_values: Some(1), max_size: Some(8702), added: 9197, mode: MaxEncodedLen)
	fn announce() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `10187`
		// Minimum execution time: 13_522_000 picoseconds.
		Weight::from_parts(14_137_000, 10187)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Announcements (r:1 w:1)
	/// Proof: Alliance Announcements (max_values: Some(1), max_size: Some(8702), added: 9197, mode: MaxEncodedLen)
	fn remove_announcement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `10187`
		// Minimum execution time: 14_546_000 picoseconds.
		Weight::from_parts(15_180_000, 10187)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Alliance DepositOf (r:0 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn join_alliance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `26328`
		// Minimum execution time: 47_985_000 picoseconds.
		Weight::from_parts(50_711_000, 26328)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn nominate_ally() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `22735`
		// Minimum execution time: 28_521_000 picoseconds.
		Weight::from_parts(30_407_000, 22735)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn elevate_ally() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `15176`
		// Minimum execution time: 28_832_000 picoseconds.
		Weight::from_parts(30_129_000, 15176)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Alliance Members (r:4 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance RetiringMembers (r:0 w:1)
	/// Proof: Alliance RetiringMembers (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn give_retirement_notice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `26548`
		// Minimum execution time: 36_853_000 picoseconds.
		Weight::from_parts(38_224_000, 26548)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Alliance RetiringMembers (r:1 w:1)
	/// Proof: Alliance RetiringMembers (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Alliance Members (r:1 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance DepositOf (r:1 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn retire() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `687`
		//  Estimated: `17315`
		// Minimum execution time: 44_053_000 picoseconds.
		Weight::from_parts(45_332_000, 17315)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance DepositOf (r:1 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn kick_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `707`
		//  Estimated: `28776`
		// Minimum execution time: 72_017_000 picoseconds.
		Weight::from_parts(76_223_000, 28776)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// Proof: Alliance UnscrupulousWebsites (max_values: Some(1), max_size: Some(25702), added: 26197, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `31874`
		// Minimum execution time: 7_760_000 picoseconds.
		Weight::from_parts(8_127_000, 31874)
			// Standard Error: 3_509
			.saturating_add(Weight::from_parts(1_796_952, 0).saturating_mul(n.into()))
			// Standard Error: 1_374
			.saturating_add(Weight::from_parts(86_363, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// Proof: Alliance UnscrupulousWebsites (max_values: Some(1), max_size: Some(25702), added: 26197, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (289 ±0) + l * (100 ±0)`
		//  Estimated: `31874`
		// Minimum execution time: 7_761_000 picoseconds.
		Weight::from_parts(8_009_000, 31874)
			// Standard Error: 211_223
			.saturating_add(Weight::from_parts(18_774_259, 0).saturating_mul(n.into()))
			// Standard Error: 82_724
			.saturating_add(Weight::from_parts(451_237, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Alliance Members (r:3 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn abdicate_fellow_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `20862`
		// Minimum execution time: 34_776_000 picoseconds.
		Weight::from_parts(36_527_000, 20862)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion ProposalOf (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalCount (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Voting (r:0 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `618 + m * (32 ±0) + p * (36 ±0)`
		//  Estimated: `15463 + m * (124 ±0) + p * (148 ±0)`
		// Minimum execution time: 38_447_000 picoseconds.
		Weight::from_parts(41_231_439, 15463)
			// Standard Error: 160
			.saturating_add(Weight::from_parts(1_819, 0).saturating_mul(b.into()))
			// Standard Error: 1_676
			.saturating_add(Weight::from_parts(39_510, 0).saturating_mul(m.into()))
			// Standard Error: 1_655
			.saturating_add(Weight::from_parts(170_361, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 124).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 148).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1042 + m * (64 ±0)`
		//  Estimated: `11182 + m * (64 ±0)`
		// Minimum execution time: 31_560_000 picoseconds.
		Weight::from_parts(35_820_634, 11182)
			// Standard Error: 1_795
			.saturating_add(Weight::from_parts(71_616, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + m * (96 ±0) + p * (37 ±0)`
		//  Estimated: `15551 + m * (384 ±0) + p * (148 ±0)`
		// Minimum execution time: 47_194_000 picoseconds.
		Weight::from_parts(44_895_986, 15551)
			// Standard Error: 1_459
			.saturating_add(Weight::from_parts(71_990, 0).saturating_mul(m.into()))
			// Standard Error: 1_423
			.saturating_add(Weight::from_parts(157_685, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 384).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 148).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:1 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `903 + m * (96 ±0) + p * (41 ±0)`
		//  Estimated: `20072 + m * (392 ±0) + p * (160 ±0)`
		// Minimum execution time: 61_903_000 picoseconds.
		Weight::from_parts(59_266_338, 20072)
			// Standard Error: 176
			.saturating_add(Weight::from_parts(549, 0).saturating_mul(b.into()))
			// Standard Error: 1_871
			.saturating_add(Weight::from_parts(75_822, 0).saturating_mul(m.into()))
			// Standard Error: 1_824
			.saturating_add(Weight::from_parts(168_771, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 392).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 160).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:1 w:0)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + m * (96 ±0) + p * (37 ±0)`
		//  Estimated: `17666 + m * (480 ±0) + p * (185 ±0)`
		// Minimum execution time: 48_968_000 picoseconds.
		Weight::from_parts(46_141_039, 17666)
			// Standard Error: 1_418
			.saturating_add(Weight::from_parts(72_395, 0).saturating_mul(m.into()))
			// Standard Error: 1_400
			.saturating_add(Weight::from_parts(162_922, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 480).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 185).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:1 w:0)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Voting (r:1 w:1)
	/// Proof Skipped: AllianceMotion Voting (max_values: None, max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:1 w:0)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:1 w:0)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Proposals (r:1 w:1)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion ProposalOf (r:0 w:1)
	/// Proof Skipped: AllianceMotion ProposalOf (max_values: None, max_size: None, mode: Measured)
	/// The range of component `b` is `[1, 1024]`.
	/// The range of component `m` is `[5, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `591 + m * (96 ±0) + p * (36 ±0)`
		//  Estimated: `17471 + m * (485 ±0) + p * (180 ±0)`
		// Minimum execution time: 47_908_000 picoseconds.
		Weight::from_parts(46_286_284, 17471)
			// Standard Error: 153
			.saturating_add(Weight::from_parts(358, 0).saturating_mul(b.into()))
			// Standard Error: 1_636
			.saturating_add(Weight::from_parts(71_590, 0).saturating_mul(m.into()))
			// Standard Error: 1_578
			.saturating_add(Weight::from_parts(157_360, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 485).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 180).saturating_mul(p.into()))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:1 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `m` is `[1, 100]`.
	/// The range of component `z` is `[0, 100]`.
	fn init_members(m: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `217`
		//  Estimated: `14064`
		// Minimum execution time: 38_712_000 picoseconds.
		Weight::from_parts(27_529_221, 14064)
			// Standard Error: 1_167
			.saturating_add(Weight::from_parts(153_596, 0).saturating_mul(m.into()))
			// Standard Error: 1_153
			.saturating_add(Weight::from_parts(138_300, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance DepositOf (r:200 w:50)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:50 w:50)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `x` is `[1, 100]`.
	/// The range of component `y` is `[0, 100]`.
	/// The range of component `z` is `[0, 50]`.
	fn disband(x: u32, y: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + x * (50 ±0) + y * (51 ±0) + z * (251 ±0)`
		//  Estimated: `35975 + x * (2587 ±0) + y * (2590 ±0) + z * (3113 ±1)`
		// Minimum execution time: 319_967_000 picoseconds.
		Weight::from_parts(325_795_000, 35975)
			// Standard Error: 27_843
			.saturating_add(Weight::from_parts(498_045, 0).saturating_mul(x.into()))
			// Standard Error: 27_709
			.saturating_add(Weight::from_parts(681_183, 0).saturating_mul(y.into()))
			// Standard Error: 55_368
			.saturating_add(Weight::from_parts(17_597_680, 0).saturating_mul(z.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(x.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(z.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(z.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 2590).saturating_mul(y.into()))
			.saturating_add(Weight::from_parts(0, 3113).saturating_mul(z.into()))
	}
	/// Storage: Alliance Rule (r:0 w:1)
	/// Proof: Alliance Rule (max_values: Some(1), max_size: Some(87), added: 582, mode: MaxEncodedLen)
	fn set_rule() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_703_000 picoseconds.
		Weight::from_parts(10_492_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Announcements (r:1 w:1)
	/// Proof: Alliance Announcements (max_values: Some(1), max_size: Some(8702), added: 9197, mode: MaxEncodedLen)
	fn announce() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `10187`
		// Minimum execution time: 13_522_000 picoseconds.
		Weight::from_parts(14_137_000, 10187)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Announcements (r:1 w:1)
	/// Proof: Alliance Announcements (max_values: Some(1), max_size: Some(8702), added: 9197, mode: MaxEncodedLen)
	fn remove_announcement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `10187`
		// Minimum execution time: 14_546_000 picoseconds.
		Weight::from_parts(15_180_000, 10187)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Alliance DepositOf (r:0 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn join_alliance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `26328`
		// Minimum execution time: 47_985_000 picoseconds.
		Weight::from_parts(50_711_000, 26328)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:0)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	fn nominate_ally() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367`
		//  Estimated: `22735`
		// Minimum execution time: 28_521_000 picoseconds.
		Weight::from_parts(30_407_000, 22735)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Alliance Members (r:2 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn elevate_ally() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `15176`
		// Minimum execution time: 28_832_000 picoseconds.
		Weight::from_parts(30_129_000, 15176)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Alliance Members (r:4 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance RetiringMembers (r:0 w:1)
	/// Proof: Alliance RetiringMembers (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	fn give_retirement_notice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `26548`
		// Minimum execution time: 36_853_000 picoseconds.
		Weight::from_parts(38_224_000, 26548)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Alliance RetiringMembers (r:1 w:1)
	/// Proof: Alliance RetiringMembers (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Alliance Members (r:1 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: Alliance DepositOf (r:1 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn retire() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `687`
		//  Estimated: `17315`
		// Minimum execution time: 44_053_000 picoseconds.
		Weight::from_parts(45_332_000, 17315)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Alliance Members (r:3 w:1)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Alliance DepositOf (r:1 w:1)
	/// Proof: Alliance DepositOf (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn kick_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `707`
		//  Estimated: `28776`
		// Minimum execution time: 72_017_000 picoseconds.
		Weight::from_parts(76_223_000, 28776)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// Proof: Alliance UnscrupulousWebsites (max_values: Some(1), max_size: Some(25702), added: 26197, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn add_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246`
		//  Estimated: `31874`
		// Minimum execution time: 7_760_000 picoseconds.
		Weight::from_parts(8_127_000, 31874)
			// Standard Error: 3_509
			.saturating_add(Weight::from_parts(1_796_952, 0).saturating_mul(n.into()))
			// Standard Error: 1_374
			.saturating_add(Weight::from_parts(86_363, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Alliance UnscrupulousAccounts (r:1 w:1)
	/// Proof: Alliance UnscrupulousAccounts (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Alliance UnscrupulousWebsites (r:1 w:1)
	/// Proof: Alliance UnscrupulousWebsites (max_values: Some(1), max_size: Some(25702), added: 26197, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `l` is `[0, 255]`.
	fn remove_unscrupulous_items(n: u32, l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + n * (289 ±0) + l * (100 ±0)`
		//  Estimated: `31874`
		// Minimum execution time: 7_761_000 picoseconds.
		Weight::from_parts(8_009_000, 31874)
			// Standard Error: 211_223
			.saturating_add(Weight::from_parts(18_774_259, 0).saturating_mul(n.into()))
			// Standard Error: 82_724
			.saturating_add(Weight::from_parts(451_237, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Alliance Members (r:3 w:2)
	/// Proof: Alliance Members (max_values: None, max_size: Some(3211), added: 5686, mode: MaxEncodedLen)
	/// Storage: AllianceMotion Proposals (r:1 w:0)
	/// Proof Skipped: AllianceMotion Proposals (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Members (r:0 w:1)
	/// Proof Skipped: AllianceMotion Members (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AllianceMotion Prime (r:0 w:1)
	/// Proof Skipped: AllianceMotion Prime (max_values: Some(1), max_size: None, mode: Measured)
	fn abdicate_fellow_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `443`
		//  Estimated: `20862`
		// Minimum execution time: 34_776_000 picoseconds.
		Weight::from_parts(36_527_000, 20862)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
