// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for frame_benchmarking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-04, STEPS: `10`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1
// --pallet=frame_benchmarking
// --extrinsic=*
// --execution=native
// --heap-pages=4096
// --output=./frame/benchmarking/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_benchmarking.
pub trait WeightInfo {
	fn addition(i: u32, ) -> Weight;
	fn subtraction(i: u32, ) -> Weight;
	fn multiplication(i: u32, ) -> Weight;
	fn division(i: u32, ) -> Weight;
	fn hashing(i: u32, ) -> Weight;
	fn sr25519_verification(i: u32, ) -> Weight;
	fn storage_read(i: u32, ) -> Weight;
	fn storage_write(i: u32, ) -> Weight;
}

/// Weights for frame_benchmarking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `i` is `[0, 1000000]`.
	fn addition(_i: u32, ) -> Weight {
		// Minimum execution time: 110 nanoseconds.
		Weight::from_ref_time(129_981)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn subtraction(_i: u32, ) -> Weight {
		// Minimum execution time: 100 nanoseconds.
		Weight::from_ref_time(181_381)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn multiplication(_i: u32, ) -> Weight {
		// Minimum execution time: 140 nanoseconds.
		Weight::from_ref_time(149_454)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn division(_i: u32, ) -> Weight {
		// Minimum execution time: 171 nanoseconds.
		Weight::from_ref_time(248_472)
	}
	/// The range of component `i` is `[0, 100]`.
	fn hashing(_i: u32, ) -> Weight {
		// Minimum execution time: 16_602_717 nanoseconds.
		Weight::from_ref_time(17_278_428_197)
	}
	/// The range of component `i` is `[0, 100]`.
	fn sr25519_verification(i: u32, ) -> Weight {
		// Minimum execution time: 201 nanoseconds.
		Weight::from_ref_time(7_886_396)
			// Standard Error: 119_472
			.saturating_add(Weight::from_ref_time(58_027_891).saturating_mul(i.into()))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_read(i: u32, ) -> Weight {
		// Minimum execution time: 110 nanoseconds.
		Weight::from_ref_time(110_000)
			// Standard Error: 11_050
			.saturating_add(Weight::from_ref_time(1_985_784).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_write(i: u32, ) -> Weight {
		// Minimum execution time: 180 nanoseconds.
		Weight::from_ref_time(180_000)
			// Standard Error: 1_147
			.saturating_add(Weight::from_ref_time(303_700).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `i` is `[0, 1000000]`.
	fn addition(_i: u32, ) -> Weight {
		// Minimum execution time: 110 nanoseconds.
		Weight::from_ref_time(129_981)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn subtraction(_i: u32, ) -> Weight {
		// Minimum execution time: 100 nanoseconds.
		Weight::from_ref_time(181_381)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn multiplication(_i: u32, ) -> Weight {
		// Minimum execution time: 140 nanoseconds.
		Weight::from_ref_time(149_454)
	}
	/// The range of component `i` is `[0, 1000000]`.
	fn division(_i: u32, ) -> Weight {
		// Minimum execution time: 171 nanoseconds.
		Weight::from_ref_time(248_472)
	}
	/// The range of component `i` is `[0, 100]`.
	fn hashing(_i: u32, ) -> Weight {
		// Minimum execution time: 16_602_717 nanoseconds.
		Weight::from_ref_time(17_278_428_197)
	}
	/// The range of component `i` is `[0, 100]`.
	fn sr25519_verification(i: u32, ) -> Weight {
		// Minimum execution time: 201 nanoseconds.
		Weight::from_ref_time(7_886_396)
			// Standard Error: 119_472
			.saturating_add(Weight::from_ref_time(58_027_891).saturating_mul(i.into()))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_read(i: u32, ) -> Weight {
		// Minimum execution time: 110 nanoseconds.
		Weight::from_ref_time(110_000)
			// Standard Error: 11_050
			.saturating_add(Weight::from_ref_time(1_985_784).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(i.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_write(i: u32, ) -> Weight {
		// Minimum execution time: 180 nanoseconds.
		Weight::from_ref_time(180_000)
			// Standard Error: 1_147
			.saturating_add(Weight::from_ref_time(303_700).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(i.into())))
	}
}
