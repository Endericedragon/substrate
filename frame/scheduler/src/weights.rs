// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-04, STEPS: `10`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `6267FC`, CPU: `AMD Ryzen 5 PRO 3600 6-Core Processor`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=native
// --heap-pages=4096
// --output=./frame/scheduler/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_scheduler.
pub trait WeightInfo {
	fn service_agendas_base() -> Weight;
	fn service_agenda_base(s: u32, ) -> Weight;
	fn service_task_base() -> Weight;
	fn service_task_fetched(s: u32, ) -> Weight;
	fn service_task_named() -> Weight;
	fn service_task_periodic() -> Weight;
	fn execute_dispatch_signed() -> Weight;
	fn execute_dispatch_unsigned() -> Weight;
	fn schedule(s: u32, ) -> Weight;
	fn cancel(s: u32, ) -> Weight;
	fn schedule_named(s: u32, ) -> Weight;
	fn cancel_named(s: u32, ) -> Weight;
}

/// Weights for pallet_scheduler using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Scheduler IncompleteSince (r:1 w:1)
	fn service_agendas_base() -> Weight {
		// Minimum execution time: 6_382 nanoseconds.
		Weight::from_ref_time(6_382_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda_base(s: u32, ) -> Weight {
		// Minimum execution time: 5_320 nanoseconds.
		Weight::from_ref_time(9_057_305)
			// Standard Error: 3_369
			.saturating_add(Weight::from_ref_time(310_057).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn service_task_base() -> Weight {
		// Minimum execution time: 12_834 nanoseconds.
		Weight::from_ref_time(12_834_000)
	}
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Minimum execution time: 23_414 nanoseconds.
		Weight::from_ref_time(23_414_000)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(403).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:0 w:1)
	fn service_task_named() -> Weight {
		// Minimum execution time: 13_946 nanoseconds.
		Weight::from_ref_time(13_946_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn service_task_periodic() -> Weight {
		// Minimum execution time: 12_553 nanoseconds.
		Weight::from_ref_time(12_553_000)
	}
	fn execute_dispatch_signed() -> Weight {
		// Minimum execution time: 5_630 nanoseconds.
		Weight::from_ref_time(5_630_000)
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Minimum execution time: 5_230 nanoseconds.
		Weight::from_ref_time(5_230_000)
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule(s: u32, ) -> Weight {
		// Minimum execution time: 19_707 nanoseconds.
		Weight::from_ref_time(23_137_616)
			// Standard Error: 4_575
			.saturating_add(Weight::from_ref_time(308_653).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel(s: u32, ) -> Weight {
		// Minimum execution time: 23_524 nanoseconds.
		Weight::from_ref_time(24_904_668)
			// Standard Error: 3_678
			.saturating_add(Weight::from_ref_time(502_026).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_named(s: u32, ) -> Weight {
		// Minimum execution time: 22_453 nanoseconds.
		Weight::from_ref_time(26_071_451)
			// Standard Error: 3_444
			.saturating_add(Weight::from_ref_time(310_737).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel_named(s: u32, ) -> Weight {
		// Minimum execution time: 25_048 nanoseconds.
		Weight::from_ref_time(26_269_957)
			// Standard Error: 4_644
			.saturating_add(Weight::from_ref_time(515_587).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Scheduler IncompleteSince (r:1 w:1)
	fn service_agendas_base() -> Weight {
		// Minimum execution time: 6_382 nanoseconds.
		Weight::from_ref_time(6_382_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda_base(s: u32, ) -> Weight {
		// Minimum execution time: 5_320 nanoseconds.
		Weight::from_ref_time(9_057_305)
			// Standard Error: 3_369
			.saturating_add(Weight::from_ref_time(310_057).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn service_task_base() -> Weight {
		// Minimum execution time: 12_834 nanoseconds.
		Weight::from_ref_time(12_834_000)
	}
	// Storage: Preimage PreimageFor (r:1 w:1)
	// Storage: Preimage StatusFor (r:1 w:1)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Minimum execution time: 23_414 nanoseconds.
		Weight::from_ref_time(23_414_000)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(403).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:0 w:1)
	fn service_task_named() -> Weight {
		// Minimum execution time: 13_946 nanoseconds.
		Weight::from_ref_time(13_946_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn service_task_periodic() -> Weight {
		// Minimum execution time: 12_553 nanoseconds.
		Weight::from_ref_time(12_553_000)
	}
	fn execute_dispatch_signed() -> Weight {
		// Minimum execution time: 5_630 nanoseconds.
		Weight::from_ref_time(5_630_000)
	}
	fn execute_dispatch_unsigned() -> Weight {
		// Minimum execution time: 5_230 nanoseconds.
		Weight::from_ref_time(5_230_000)
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule(s: u32, ) -> Weight {
		// Minimum execution time: 19_707 nanoseconds.
		Weight::from_ref_time(23_137_616)
			// Standard Error: 4_575
			.saturating_add(Weight::from_ref_time(308_653).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Scheduler Agenda (r:1 w:1)
	// Storage: Scheduler Lookup (r:0 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel(s: u32, ) -> Weight {
		// Minimum execution time: 23_524 nanoseconds.
		Weight::from_ref_time(24_904_668)
			// Standard Error: 3_678
			.saturating_add(Weight::from_ref_time(502_026).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_named(s: u32, ) -> Weight {
		// Minimum execution time: 22_453 nanoseconds.
		Weight::from_ref_time(26_071_451)
			// Standard Error: 3_444
			.saturating_add(Weight::from_ref_time(310_737).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Scheduler Lookup (r:1 w:1)
	// Storage: Scheduler Agenda (r:1 w:1)
	/// The range of component `s` is `[1, 512]`.
	fn cancel_named(s: u32, ) -> Weight {
		// Minimum execution time: 25_048 nanoseconds.
		Weight::from_ref_time(26_269_957)
			// Standard Error: 4_644
			.saturating_add(Weight::from_ref_time(515_587).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
