
//! Autogenerated weights for `pallet_lottery`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-27, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `i9`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=1
// --pallet=pallet_lottery
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights-dev-release/frame/lottery/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_lottery`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_lottery::WeightInfo for WeightInfo<T> {
	/// Storage: Lottery Lottery (r:1 w:0)
	/// Proof: Lottery Lottery (max_values: Some(1), max_size: Some(29), added: 524, mode: MaxEncodedLen)
	/// Storage: Lottery CallIndices (r:1 w:0)
	/// Proof: Lottery CallIndices (max_values: Some(1), max_size: Some(21), added: 516, mode: MaxEncodedLen)
	/// Storage: Lottery TicketsCount (r:1 w:1)
	/// Proof: Lottery TicketsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Lottery Participants (r:1 w:1)
	/// Proof: Lottery Participants (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
	/// Storage: Lottery LotteryIndex (r:1 w:0)
	/// Proof: Lottery LotteryIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Lottery Tickets (r:0 w:1)
	/// Proof: Lottery Tickets (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	fn buy_ticket() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484`
		//  Estimated: `13121`
		// Minimum execution time: 41_009 nanoseconds.
		Weight::from_ref_time(41_009_000)
			.saturating_add(Weight::from_proof_size(13121))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Lottery CallIndices (r:0 w:1)
	/// Proof: Lottery CallIndices (max_values: Some(1), max_size: Some(21), added: 516, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 10]`.
	fn set_calls(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_679 nanoseconds.
		Weight::from_ref_time(13_300_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Lottery Lottery (r:1 w:1)
	/// Proof: Lottery Lottery (max_values: Some(1), max_size: Some(29), added: 524, mode: MaxEncodedLen)
	/// Storage: Lottery LotteryIndex (r:1 w:1)
	/// Proof: Lottery LotteryIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn start_lottery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `6596`
		// Minimum execution time: 32_967 nanoseconds.
		Weight::from_ref_time(32_967_000)
			.saturating_add(Weight::from_proof_size(6596))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Lottery Lottery (r:1 w:1)
	/// Proof: Lottery Lottery (max_values: Some(1), max_size: Some(29), added: 524, mode: MaxEncodedLen)
	fn stop_repeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `1514`
		// Minimum execution time: 6_430 nanoseconds.
		Weight::from_ref_time(6_430_000)
			.saturating_add(Weight::from_proof_size(1514))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Lottery Lottery (r:1 w:1)
	/// Proof: Lottery Lottery (max_values: Some(1), max_size: Some(29), added: 524, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Lottery TicketsCount (r:1 w:1)
	/// Proof: Lottery TicketsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Lottery Tickets (r:1 w:0)
	/// Proof: Lottery Tickets (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	fn on_initialize_end() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556`
		//  Estimated: `16787`
		// Minimum execution time: 53_145 nanoseconds.
		Weight::from_ref_time(53_145_000)
			.saturating_add(Weight::from_proof_size(16787))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Lottery Lottery (r:1 w:1)
	/// Proof: Lottery Lottery (max_values: Some(1), max_size: Some(29), added: 524, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Lottery TicketsCount (r:1 w:1)
	/// Proof: Lottery TicketsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Lottery Tickets (r:1 w:0)
	/// Proof: Lottery Tickets (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Lottery LotteryIndex (r:1 w:1)
	/// Proof: Lottery LotteryIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn on_initialize_repeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556`
		//  Estimated: `18276`
		// Minimum execution time: 54_391 nanoseconds.
		Weight::from_ref_time(54_391_000)
			.saturating_add(Weight::from_proof_size(18276))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(5))
	}
}
